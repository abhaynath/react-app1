{"version":3,"sources":["helpers/api-calls.ts","components/card/index.tsx","helpers/common.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["API_PlayerList","a","objRequest","axios","post","data","Card","useState","playerList","setPlayerList","getPlayerList","console","log","className","onClick","map","player","key","Math","random","toString","replace","substr","Date","now","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SAEaA,EAAc,uCAAG,8BAAAC,EAAA,4DACV,gDACZC,EAAa,GAFS,SAGXC,IAAMC,KAFL,gDAEqBF,GAHX,cAGxBG,EAHwB,yBAIrBA,GAJqB,2CAAH,qDCGdC,G,MAAO,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACjBC,EADiB,KACLC,EADK,KAElBC,EAAa,uCAAG,4BAAAT,EAAA,sEACHD,IADG,OAChBK,EADgB,OAEpBM,QAAQC,IAAI,WAAYP,EAAKA,MAC7BI,EAAcJ,EAAKA,MAHC,2CAAH,qDAMnB,OACE,yBAAKQ,UAAU,QACb,yBAAKA,UAAU,SAAf,wBAEA,yBAAKA,UAAU,QACb,4BAAQC,QAASJ,GAAjB,qBAEF,yBAAKG,UAAU,cACZL,EAAWO,KAAI,SAACC,GACf,OACE,yBAAKH,UAAU,SAASI,ICtBlCC,KAAKC,SACFC,SAAS,IACTC,QAAQ,WAAY,IACpBC,OAAO,EAAG,GAAKC,KAAKC,ODoBX,yBAAKX,UAAU,QAAQG,EAAOS,cEX7BC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,Q,MCIcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.ac7d2938.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const API_PlayerList = async () => {\r\n  const BASE_PATH = \"https://abhay-cricket.herokuapp.com/api/users\";\r\n  const objRequest = {};\r\n  let data = await axios.post(BASE_PATH, objRequest);\r\n  return data;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { API_PlayerList } from \"../../helpers/api-calls\";\r\nimport { getId } from \"../../helpers/common\";\r\nimport \"./style.css\";\r\n\r\nexport const Card = () => {\r\n  const [playerList, setPlayerList] = useState([]);\r\n  const getPlayerList = async () => {\r\n    let data = await API_PlayerList();\r\n    console.log(\"--data--\", data.data);\r\n    setPlayerList(data.data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"title\">My Favourite Players</div>\r\n\r\n      <div className=\"btns\">\r\n        <button onClick={getPlayerList}>Get Players List</button>\r\n      </div>\r\n      <div className=\"playerList\">\r\n        {playerList.map((player: any) => {\r\n          return (\r\n            <div className=\"player\" key={getId()}>\r\n              <div className=\"name\">{player.name}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const getId = () =>\r\n  Math.random()\r\n    .toString(36)\r\n    .replace(/[^a-z]+/g, \"\")\r\n    .substr(0, 5) + Date.now();\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { Card } from \"./components/card\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Card></Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"typeface-roboto\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}